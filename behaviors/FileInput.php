<?php

namespace zabachok\hydra\behaviors;

use yii\base\Behavior;
use yii\base\Exception;
use yii\db\ActiveRecord;
use zabachok\hydra\components\UploadedFile;
use yii\validators\Validator;

class FileInput extends Behavior
{
    protected $_file;

    public $attribute;

    public $fileInputName;

    public $extensions = ['jpg', 'png'];

    public $filePath;

    public function attach($model)
    {
        parent::attach($model);
        if (empty($this->fileInputName))
        {
            $this->fileInputName = 'hydra_' . $this->attribute;
        }
    }

    public function events()
    {
        return [
            ActiveRecord::EVENT_BEFORE_VALIDATE => 'beforeValidate',
            ActiveRecord::EVENT_AFTER_INSERT    => 'afterSave',
            ActiveRecord::EVENT_AFTER_UPDATE    => 'afterSave',
        ];
    }

    public function beforeValidate($event)
    {
        /** @var ActiveRecord $model */
        $model = $this->owner;


        if ($model->{$this->fileInputName} instanceof UploadedFile)
        {
            $file = $model->{$this->fileInputName};
        } else
        {
            $file = UploadedFile::getInstance($model, $this->fileInputName);
        }
        if ($file && $file->name)
        {
            $model->{$this->fileInputName} = $file;
            $validator = Validator::createValidator('file', $model, $this->fileInputName, [
                'extensions' => $this->extensions,
            ]);
            $validator->validateAttribute($model, $this->fileInputName);
        }
    }

    public function afterSave()
    {
        $model = $this->owner;

        if ($model->{$this->fileInputName} instanceof UploadedFile)
        {
            $callback = $this->filePath;
            if(!is_callable($callback)) throw new Exception('Property "filePath" must be callable');
            $model->{$this->attribute} = $model->{$this->fileInputName}->saveAs($callback());
            $model->updateAttributes([$this->attribute]);
        }

    }

    public function __get($name)
    {
        if ($this->fileInputName == $name)
        {
            return $this->_file;
        }

        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        if ($this->fileInputName == $name)
        {
            return $this->_file = $value;
        }

        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        if ($this->fileInputName == $name)
        {
            return true;
        }
        return parent::__isset($name);
    }

    public function canGetProperty($name, $checkVars = true)
    {
        if ($this->fileInputName == $name)
        {
            return true;
        }

        return parent::canGetProperty($name, $checkVars); // TODO: Change the autogenerated stub
    }

    public function canSetProperty($name, $checkVars = true)
    {
        if ($this->fileInputName == $name)
        {
            return true;
        }

        return parent::canSetProperty($name, $checkVars); // TODO: Change the autogenerated stub
    }
}